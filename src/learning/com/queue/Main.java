package learning.com.queue;

import java.util.Random;

public class Main {
    public static void main(String[] args) {
        Server server = new Server();
        Client client11 = new Client("Ivan");
        Client client22 = new Client("Maks");
        Client client33 = new Client("Qwerty");
    }
}
//    Написать программу для обработки запросов к банковским счетам.
//    Программа должна состоять из нескольких клиентов, генерирующих запрос, и «сервера», принимающего запросы,
//    помещающего их в очередь и выполняющего эти запрос.
//    Программа создает три клиента, каждый из которых регистрируется у сервера, т.е.
//    клиент сохраняется у сервера в специальном списке.
//    При регистрации клиенты сообщают серверу, с какими счетами они работают. Сервер так же сохраняет эти счета.
//    Далее, сервер отправляет клиентам сообщение о готовности принимать запросы.
//    Клиенты по очереди генерируют запросы и отправляют их серверу.
//    Это делается в бесконечном цикле, который обрывается, если  сервер перегружен и хотя бы один из клиентов не смог отправить запрос.
//    Когда число запросов в очереди достигает 10, сервер отправляет сообщение о том, что он больше не принимает запросы.
//    Начинается выполнение полученных запросов. Когда все запросы выполнены, сервер снова оповещает клиентов о готовности принимать запросы.
//    Так повторяется трижды.
//        Счет – это класс, у которого есть следующие поля:
//        номер счета – целое число
//        сумма – кол-во денег на счете, изначально равняется 1 млн.
//        активность счет – Boolean, если поле равно false,  значит он заблокирован и списание/зачисление запрещено.
//        Запрос – это класс, состоящий из следующих полей:
//        Вид запроса – перечисление со следующими значениями:
//        WRITEDOWN – списание средств со счета
//        PASSING – зачисление средств на счет
//        BLOCK – блокирование счета
//        UNBLOCK – разблокирование счета
//        Сумма – денежная сумма, которую необходимо списать или зачислить на счет (в зависимости от вида запроса).
//        Если вид запроса  - BLOCK или UNBLOCK, это поле игнорируется.
//        Номер счета
//        Дата создания запроса (включая час, минуты и секунды)
//        Клиент – это класс, состоящий из следующих полей:
//        Счета – список счетов, с которыми работает клиент
//        id – уникальный идентификатор, целое число
//        Готовность сервера – true если клиент получил информацию о том, что сервер принимает запросы и false,  если нет.
//        У Клиента должны быть следующие методы:
//        Зарегистрироваться у сервера – вызвать у сервера метод, добавляющий клиента в список клиентов. Так же при вызове этого метода, сервер сохраняет у себя счета, с которыми работает клиент.
//        Отправить запрос – создать запрос и отправить его серверу. В созданном запросе  поля «вид запроса» и «сумма» генерируется случайным образом, но сумма должна быть меньше 1000.
//        Поле «номер счета» должно содержать один из  номеров списка счетов клиента.  Возвращает true, если сервер получил запрос.
//        Если сервер не принимает запросы (т.е. готовность сервера == false), то метод возвращает  false.
//        Оповестить о готовности – метод вызывается, чтобы сказать клиенту, что сервер готов принимать запросы.
//        Оповестить о неготовности  – метод вызывается, чтобы сказать клиенту, что сервер не готов принимать запросы.
//        «Сервер» это класс со следующими полями:
//        Счета – список банковских счетов.
//        Очередь – приоритетная очередь запросов. Инициализируются с помощью интерфейса Comparator. Запросы располагаются в очереди по следующему принципу:
//        Запросы, пришедшие раньше, должны выполняться раньше, но BLOCK и UNBLOCK  - исключение. Эти запросы должны выполниться раньше остальных.
//        Клиенты – список клиентов
//        У сервера есть следующие методы:
//        Зарегистрировать клиента – добавить нового клиента в список клиентов.
//        Принять запрос – принять запрос от клиента. Если после принятого запроса очередь заполнена, сервер оповещает клиентов о том, что запросы не принимаются.
//        Оповестить о готовности принимать запросы
//        Выполнить запросы
//        Оповестить о неготовности принимать запросы

//    Client client = new Client();
//    Client client1 = new Client();
//    Client client2 = new Client();
//    int counter = 0;
//        while (counter != 10){
//                counter += 1;
//                Random random = new Random();
//                int i = random.nextInt(3);
//                switch (i){
//                case 0:
//                server.addRequest(client.generateRequest());
//                break;
//                case 1:
//                server.addRequest(client1.generateRequest());
//                break;
//                case 2:
//                server.addRequest(client2.generateRequest());
//                break;
//                }
//                }
